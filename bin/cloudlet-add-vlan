#!/bin/bash

if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root, and requires the following packages:"
    echo "    bridge-utils vlan dnsmasq openvpn"
    exit 2
fi

if [ $# -lt 1 ]; then
    echo "Usage: $0 [interface] <vid> [vid...]"
    echo
    echo "Adds the specified VLAD IDs (VIDs) to the given interface."
    echo ""
    echo "To make IP addressing convenient, VIDs must be nubered from"
    echo "    1 <= vid <= 255"
    echo "(Usage of VLAN 1 is not recommended.)"
    echo ""
    echo "IPv4 addresses will be allocated from the carrier-grade NAT space for"
    echo "each VLAN, in the format:"
    echo "    100.64.<vid>.1/24"
    echo ""
    echo "If the first argument is non-numeric, it will be interpreted as an"
    echo "interface name. Otherwise, the interface for the default route will"
    echo "be used."
    exit 1
fi

# Ensure we're in the directory containing all the helper scripts.
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

case "$1" in
    # If $1 is all-numbers, it's a VID, not an interface name.
    [0-9]*)
        IFACE=$(./cloudlet-net--get-default-interface)
        ;;
    *)
        IFACE=$1
        shift
        ;;
esac

VIDS="$@"

# The IP address that will listen for VPN connections.
# This is done indirectly, via an iptables rule.
LISTEN_IP=${LISTEN_IP:-$(./cloudlet-net--get-default-source-ip)}
CLOUDLET_VPN_PORT_OFFSET=${CLOUDLET_VPN_PORT_OFFSET:-2000}

echo "Adding VIDs to interface: $IFACE"
echo ""

# Ensure VLAN support is loaded into the kernel.
modprobe 8021q

# Use "vlanNNNN" naming, so that long interface names (such as those
# on the Orange Box) don't overflow the 15-character limit.
vconfig set_name_type VLAN_PLUS_VID_NO_PAD > /dev/null

# Add each VID
for VID in $VIDS; do
    # Add the VLAN (and ensure it is set link-up).
    TENANT=tenant$VID
    TENANT_IFNAME=tenant$VID
    VETH_IFNAME=veth$VID
    NETNS_RUN="ip netns exec $TENANT"
    VPN_PORT=$(($CLOUDLET_VPN_PORT_OFFSET+$VID))
    TENANT_NETWORK_ID=${TENANT_NETWORK_ID:-$VID}
    ip netns add $TENANT 2> /dev/null
    ip link add $TENANT_IFNAME type veth peer name $VETH_IFNAME
    ip link set $VETH_IFNAME netns $TENANT
    vconfig add $IFACE $VID 2> /dev/null
    ip link set dev vlan$VID up 2> /dev/null
    # Add the VLAN to a bridge, so that we can attach to it.
    brctl addbr br-vlan$VID 2> /dev/null
    brctl addif br-vlan$VID vlan$VID 2> /dev/null
    brctl addif br-vlan$VID $TENANT_IFNAME 2> /dev/null
    # Add an IP address from the CGN space (RFC 6598) for each VLAN.
    ip addr add 100.65.$VID.1/30 dev br-vlan$VID
    $NETNS_RUN ip addr add 100.65.$VID.2/30 dev $VETH_IFNAME 2> /dev/null
    $NETNS_RUN ip addr add 100.64.$TENANT_NETWORK_ID.1/24 dev $VETH_IFNAME 2> /dev/null
    $NETNS_RUN ip link set dev lo up
    ip link set dev $TENANT_IFNAME up
    $NETNS_RUN ip link set dev $VETH_IFNAME up
    ip link set dev br-vlan$VID up
    $NETNS_RUN ip route add default via 100.65.$VID.1
    # Rules to allow traffic from the VMs to access the internet.
    $NETNS_RUN iptables --table nat --append POSTROUTING --out-interface $VETH_IFNAME --source 100.64.$TENANT_NETWORK_ID.0/24 --jump SNAT --to-source 100.65.$VID.2
    iptables --table nat --insert POSTROUTING --source 100.65.$VID.2 -j MASQUERADE
    # Rules to allow VPN clients to connect.
    iptables -t nat -I PREROUTING -p udp -d $LISTEN_IP --dport $VPN_PORT -j DNAT --to-destination 100.65.$VID.2:$VPN_PORT
    iptables -I FORWARD -p udp -d $LISTEN_IP --dport $VPN_PORT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
    echo "Allocated VLAN $VID:"
    ip addr show dev br-vlan$VID
    echo
done

echo
echo

for VID in $VIDS; do
    echo "Starting dnsmasq on VLAN $VID"
    ./cloudlet-net--start-dnsmasq $VID
    VPN_STATE_DIR=/var/lib/cloudlet/vpn
    mkdir -p $VPN_STATE_DIR
    if [ ! -f $VPN_STATE_DIR/static.key ]; then
        openvpn --genkey --secret $VPN_STATE_DIR/static.key
    fi
    ./cloudlet-net--get-openvpn-config --server $VID > $VPN_STATE_DIR/tenant$VID-server.ovpn
    ./cloudlet-net--get-openvpn-config --client $VID > $VPN_STATE_DIR/tenant$VID-client.ovpn
    ip netns exec tenant$VID openvpn --config $VPN_STATE_DIR/tenant$VID-server.ovpn
done
